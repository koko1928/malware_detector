import os
import hashlib
import concurrent.futures
import requests
import time
import logging
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import tkinter as tk
from tkinter import messagebox

BUFFER_SIZE = 65536
SELECTED_EXTS = ['.py', '.exe', '.dll', '.bat']

# Define the Malware Bazaar API key (Store this securely, do not hardcode in the code)
MALWARE_BAZAAR_API_KEY = "YOUR_API_KEY"

class Antivirus:
    def __init__(self, malicious_hashes, max_workers=4):
        self.malicious_hashes = malicious_hashes
        self.max_workers = max_workers
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)
        self.file_handler = logging.FileHandler('antivirus.log')
        self.logger.addHandler(self.file_handler)
        self.real_time_observer = Observer()
        self.real_time_observer.schedule(RealTimeScanHandler(self), path='path_to_watch', recursive=True)
        self.real_time_observer.start()
        self.virus_database = set()  # Database for known malware hashes
        self.load_known_malware_database()  # Load known malware hashes from a file

    def load_known_malware_database(self):
        # Load known malware hashes from a file into the database
        with open('known_malware_hashes.txt', 'r') as f:
            for line in f:
                self.virus_database.add(line.strip())

    def save_known_malware_database(self):
        # Save the known malware database back to a file (for updates)
        with open('known_malware_hashes.txt', 'w') as f:
            for hash_value in self.virus_database:
                f.write(hash_value + '\n')

    @staticmethod
    def calculate_checksum(filename):
        try:
            with open(filename, 'rb') as f:
                hash_obj = hashlib.sha256()
                while True:
                    buf = f.read(BUFFER_SIZE)
                    if not buf:
                        break
                    hash_obj.update(buf)
                return hash_obj.hexdigest()
        except FileNotFoundError:
            return None

    def check_known_malware(self, file_checksum):
        # Check if the file's hash is in the known malware database
        return file_checksum in self.virus_database

    def scan_file(self, filename):
        try:
            file_checksum = self.calculate_checksum(filename)
            if file_checksum and self.check_known_malware(file_checksum):
                self.logger.info(f"File {filename} is infected.")
                self.show_notification(f"Infected file detected: {filename}")
                return filename, True
            return filename, False
        except Exception as e:
            self.logger.error(f"An error occurred while scanning {filename}: {e}")
            return filename, False

    def scan_directory(self, directory):
        infected_files = []
        files_to_scan = [file.path for file in os.scandir(directory) if file.is_file() and os.path.splitext(file.name)[1].lower() in SELECTED_EXTS]
        with concurrent.futures.ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            results = [executor.submit(self.scan_file, file) for file in files_to_scan]
            for result in concurrent.futures.as_completed(results):
                if result.result()[1]:
                    infected_files.append(result.result()[0])
        return infected_files

    def show_notification(self, message):
        # Display a pop-up notification
        root = tk.Tk()
        root.withdraw()
        messagebox.showinfo("Antivirus Notification", message)

class RealTimeScanHandler(FileSystemEventHandler):
    def __init__(self, antivirus):
        self.antivirus = antivirus

    def on_created(self, event):
        if event.is_directory:
            return
        self.scan_file(event.src_path)

    def scan_file(self, filename):
        result, is_infected = self.antivirus.scan_file(filename)
        if is_infected:
            self.antivirus.show_notification(f"Infected file detected: {filename}")

if __name__ == '__main__':
    url = "https://raw.githubusercontent.com/eminunal1453/Various-Malware-Hashes/main/hashes.txt"
    response = requests.get(url)
    malicious_hashes = set(response.text.splitlines())

    if not malicious_hashes:
        print("Malicious hashes not available. Exiting.")
        sys.exit(1)

    if not os.path.exists('known_malware_hashes.txt'):
        with open('known_malware_hashes.txt', 'w') as f:
            pass

    antivirus = Antivirus(malicious_hashes)

    directory_to_scan = 'path_to_directory'
    infected_files = antivirus.scan_directory(directory_to_scan)

    if infected_files:
        print("Infected files:")
        for file in infected_files:
            print(file)
    else:
        print("No infected files found.")
